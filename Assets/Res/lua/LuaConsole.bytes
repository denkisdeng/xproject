local ERROR = print
local error = error
local rawToString = tostring

module("luaConsole", package.seeall)

if not setfenv then
    function setfenv(f,env)
        debug.setupvalue(f,1,env)
    end
end

function tostring(value)
    if type(value) == "table" and value._NAME then
        return string.format("%s:%s", value._NAME, rawToString(value))
    elseif type(value) == "function" then
        local info = debug.getinfo(value)
        return string.format("%s:%d:%s", info.short_src, info.linedefined, rawToString(value))
    else
        return rawToString(value)
    end
end

function printVar(value)
    local tstr = type(value)
    if tstr == "table" then
        print( prettyTabToStr(value) )
    elseif tstr == "userdata" then
        printUserdata(value)
    else
        print(tostring(value))
    end
end

function lightPrintVar(value)
    local tstr = type(value)
    if tstr == "table" then
        local str = ""
        for k,v in pairs(value)do
            str = string.format("%s%s=%s\n", str, tostring(k), tostring(v))
        end
        print(str)
    elseif tstr == "userdata" then
        printUserdata(value)
    else
        print(tostring(value))
    end
end

function eval(str)
    local env = buildEnv()
    local func,err = loadstring("do " .. str .. " end")
    if not func then
        error(err)
        return
    end
    setfenv(func, env)
    func()
end

function printExpr(value)
    local env = buildEnv()
    if value:match("^[_%a][_%w]*$") then
        local matchvalue = env[value]
        printVar(matchvalue)

    else
        local func,err = loadstring("return " .. value)
        if not func then
            error(err)
            return
        end
        setfenv(func, env)

        local result = {func()}
        if #result > 1 then
            printVar(result)
        else
            printVar(result[1])
        end

    end
end

function lightPrintExpr(value)
    local env = buildEnv()
    if value:match("^[_%a][_%w]*$") then
        local matchvalue = env[value]
        lightPrintVar(matchvalue)

    else
        local func,err = loadstring("return " .. value)
        if not func then
            error(err)
            return
        end
        setfenv(func, env)

        local result = {func()}
        if #result > 1 then
            lightPrintVar(result)
        else
            lightPrintVar(result[1])
        end

    end
end

function buildEnv()
    local localEnv = setmetatable({}, {__index=_G})
    local env = setmetatable({}, {__index=localEnv, __newindex=_G})
    return env
end

function printUserdata(ud)
    print(ud)
end

function prettyTabToStr(tab, level, path, visited)
    local result = ""
    if level == nil then
        visited = {}
        level = 0
        path = "(self)"
    end

    if visited[tab] then
        return string.format( "%s%s\n", string.rep("\t", level), visited[tab] )
    end
    visited[tab] = path

    result = result .. string.format("%s{\n", string.rep("\t", level))
    local ignore = {}
    for i,v in ipairs(tab)do
        ignore[i] = true
        if type(v) == "table" then
            local newPath = path .. "." .. tostring(k)
            if visited[v] then
                local existPath = visited[v]
                local _,count1 = string.gsub(existPath, "%.", function()end)
                local _,count2 = string.gsub(newPath, "%.", function()end)
                if count2 < count1 then
                    visited[v] = newPath
                end
                result = result .. string.format("%s%s\n", string.rep("\t", level+1), visited[v])
            else
                result = result .. string.format("%s\n", string.rep("\t", level+1))
                result = result .. prettyTabToStr(v, level+1, newPath, visited)
            end
        else
            result = result .. string.format("%s%s,\n", string.rep("\t", level+1), tostring(v))
        end
    end
    for k,v in pairs(tab)do
        if not ignore[k] then
            local typeOfKey = type(k)
            local kStr = k
            if typeOfKey == "string" then
                if not k:match("^[_%a][_%w]*$") then
                    kStr = '["' .. k .. '"] = '
                else
                    kStr = tostring(k) .. " = "
                end
            else
                kStr = string.format("[%s] = ", tostring(k))
            end

            if type(v) == "table" then
                local newPath = path .. "." .. tostring(k)
                if visited[v] then
                    local existPath = visited[v]
                    local _,count1 = string.gsub(existPath, "%.", function()end)
                    local _,count2 = string.gsub(newPath, "%.", function()end)
                    if count2 < count1 then
                        visited[v] = newPath
                    end
                    result = result .. string.format("%s%s%s\n", string.rep("\t", level+1), tostring(kStr), visited[v])
                else
                    result = result .. string.format("%s%s\n", string.rep("\t", level+1), tostring(kStr))
                    result = result .. prettyTabToStr(v, level+1, newPath, visited)
                end
            else
                result = result .. string.format("%s%s%s,\n", string.rep("\t", level+1), tostring(kStr), tostring(v))
            end
        end
    end
    result = result .. string.format("%s}\n", string.rep("\t", level))
    return result
end
